{"version":3,"sources":["utils/APICalls.js","Components/WelcomeHeader/WelcomeHeader.js","Components/AddTodo/AddTodo.js","Components/ListTodo/ListTodo.js","Components/PageLoader/PageLoader.js","Components/Header/Header.js","Components/Login/Login.js","Components/Signup/Signup.js","utils/Helper.js","Components/App.js","serviceWorker.js","index.js"],"names":["axiosInstance","axios","create","baseURL","process","withCredentials","interceptors","response","use","res","error","Promise","reject","signout","post","then","user","data","login","email","password","signup","name","addTodo","title","description","todo","updateTodo","_id","important","arguments","length","undefined","done","fieldsToUpdate","patch","deleteTodo","delete","WelcomeHeader","props","userName","React","createElement","MDBRow","MDBCol","className","concat","onClick","AddTodo","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","apply","state","titleError","errMessage","validateInput","handleTitleChange","e","setState","target","value","handleDescriptionChange","resetInput","handleAddTodo","catch","message","_createClass","key","_this$props","this","MDBContainer","MDBInput","onChange","label","background","size","maxLength","type","Component","ListTodo","todos","columns","field","sort","rows","_this2","initiateTodo","ps","_objectSpread","fillTodoRows","MDBDataTable","striped","bordered","small","btn","PageLoader","Loader","height","width","require","Header","Login","invalidEmail","emptyPassword","loginFailed","errMsg","handleEmailInput","handlePasswordInput","validate","invalid","isEmail","handleSubmit","invalidField","_defineProperty","status","md","icon","group","success","Signup","emptyName","signupFailed","handleNameInput","trim","signupDone","err","errmsg","errors","backToLogin","autoFocus","todoRecords","handleImportant","handleDone","map","rec","index","id","MDBTooltip","placement","MDBBtn","tag","floating","MDBIcon","App","init","loggedInUser","token","newTodo","_toConsumableArray","handleDelete","toggleSignup","newState","logout","handleLogin","splice","handleSignout","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mZAEMA,E,OAAgBC,EAAMC,OAAO,CACjCC,QAASC,6BACTC,iBAAiB,IAGnBL,EAAcM,aAAaC,SAASC,KAClC,SAACC,GACC,OAAOA,KAET,SAACC,GACC,OAAOC,QAAQC,OAAOF,EAAMH,aAIzB,IAAMM,EAAU,WACrB,OAAOb,EAAcc,KAAK,eAAeC,MAAK,SAACC,GAE7C,OAAOA,EAAKC,SAUHC,EAAQ,SAACC,EAAOC,GAC3B,OAAOpB,EACJc,KAAK,aAAc,CAClBK,QACAC,aAEDL,MAAK,SAACC,GAEL,OAAOA,EAAKC,SAILI,EAAS,SAACC,EAAMH,EAAOC,GAClC,OAAOpB,EACJc,KAAK,cAAe,CACnBQ,OACAH,QACAC,aAEDL,MAAK,SAACC,GACL,OAAOA,EAAKC,SAILM,EAAU,SAACC,EAAOC,GAC7B,OAAOzB,EACJc,KAAK,gBAAiB,CACrBU,QACAC,gBAEDV,MAAK,SAACW,GACL,OAAOA,EAAKT,SAWLU,EAAa,SAACC,GAAwC,IAAnCC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAEjDI,EAAiB,CACrBN,OASF,OANkB,OAAdC,IACFK,EAAeL,UAAYA,GAEhB,OAATI,IACFC,EAAeD,KAAOA,GAEjBjC,EACJmC,MAAM,mBAAoBD,GAC1BnB,MAAK,SAACW,GACL,OAAOA,EAAKT,SAILmB,EAAa,SAACR,GAEzB,OAAO5B,EACJqC,OAAO,mBAAoB,CAC1BpB,KAAM,CACJW,SAGHb,MAAK,SAACW,GACL,OAAOA,M,OC9FE,SAASY,EAAcC,GAClC,IAAQC,EAAsBD,EAAtBC,SAAU3B,EAAY0B,EAAZ1B,QAClB,OACI4B,IAAAC,cAACC,IAAM,KACHF,IAAAC,cAACE,IAAM,KACHH,IAAAC,cAAA,QAAMG,UAAU,gBAAc,WAAAC,OAAcN,KAEhDC,IAAAC,cAACE,IAAM,KACHH,IAAAC,cAAA,OAAKG,UAAU,eACXJ,IAAAC,cAAA,UAAQG,UAAU,SAASE,QAAS,WAAQlC,MAAa,e,WC8F9DmC,EAtGF,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAzB,UAAAC,OAAAyB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA5B,UAAA4B,GAuDR,OAvDQL,EAAAF,EAAAQ,KAAAC,MAAAT,EAAA,OAAAL,OAAAU,KACTK,MAAQ,CACJrC,MAAO,GACPC,YAAa,GACbQ,MAAM,EACNJ,WAAW,EACXiC,YAAY,EACZC,WAAY,IACfV,EAEDW,cAAgB,WACZ,QAASX,EAAKQ,MAAMrC,OACvB6B,EACDY,kBAAoB,SAACC,GACjBb,EAAKc,SAAS,CACV3C,MAAO0C,EAAEE,OAAOC,MAChBP,YAAY,KAEnBT,EAEDiB,wBAA0B,SAACJ,GACvBb,EAAKc,SAAS,CAAE1C,YAAayC,EAAEE,OAAOC,SACzChB,EAEDkB,WAAa,WACTlB,EAAKc,SAAS,CACV3C,MAAO,GACPC,YAAa,MAEpB4B,EAEDmB,cAAgB,WACZnB,EAAKc,SAAS,CAAEJ,WAAY,KAExBV,EAAKW,gBACLzC,EAAQ8B,EAAKQ,MAAMrC,MAAO6B,EAAKQ,MAAMpC,aAChCV,MAAK,SAAAW,GACF2B,EAAKd,MAAMhB,QAAQ,CACfC,MAAO6B,EAAKQ,MAAMrC,MAClBC,YAAa4B,EAAKQ,MAAMpC,YACxBI,WAAW,EACXI,MAAM,EACNL,IAAKF,EAAKA,KAAKE,MAEnByB,EAAKkB,gBAERE,OAAM,SAAA/D,GACH2C,EAAKc,SAAS,CAAEJ,WAAYrD,EAAMO,KAAKyD,aAI/CrB,EAAKc,SAAS,CACVL,YAAY,KAGvBT,EA4CA,OA5CAsB,YAAA3B,EAAA,EAAA4B,IAAA,SAAAP,MAED,WACI,IAAAQ,EAA8BC,KAAKvC,MAA3BC,EAAQqC,EAARrC,SAAU3B,EAAOgE,EAAPhE,QAClB,OACI4B,IAAAC,cAACqC,IAAY,CAAClC,UAAU,iBACpBJ,IAAAC,cAACJ,EAAa,CAACE,SAAUA,EAAU3B,QAASA,IAC5C4B,IAAAC,cAACC,IAAM,KACHF,IAAAC,cAACE,IAAM,KACHH,IAAAC,cAACsC,IAAQ,CACLX,MAAOS,KAAKjB,MAAMrC,MAClByD,SAAUH,KAAKb,kBACfiB,MAAM,aACNC,YAAU,EACVC,KAAON,KAAKjB,MAAMC,WAAc,mBAAqB,KACrDjB,UAAYiC,KAAKjB,MAAMC,WAAc,aAAe,GACpDuB,UAAW,MAGVP,KAAKjB,MAAMC,YAAerB,IAAAC,cAAA,QAAMG,UAAU,cAAa,kCAIpEJ,IAAAC,cAACC,IAAM,KACHF,IAAAC,cAACE,IAAM,KACHH,IAAAC,cAACsC,IAAQ,CACLX,MAAOS,KAAKjB,MAAMpC,YAClBwD,SAAUH,KAAKR,wBACfgB,KAAK,WACLJ,MAAM,mBACNC,YAAU,EACVE,UAAW,QAIvB5C,IAAAC,cAACC,IAAM,KACHF,IAAAC,cAACE,IAAM,CAACC,UAAU,eACdJ,IAAAC,cAAA,UAAQ4C,KAAK,SAASvC,QAAS+B,KAAKP,WAAY1B,UAAU,8CAA6C,SACvGJ,IAAAC,cAAA,UAAQ4C,KAAK,SAASvC,QAAS+B,KAAKN,cAAe3B,UAAU,8CAA6C,cAM7HG,EAnGQ,CAASuC,a,QC6FPC,G,OA9FD,SAAAvC,GAAAC,YAAAsC,EAAAvC,GAAA,IAAAE,EAAAC,YAAAoC,GAAA,SAAAA,IAAA,IAAAnC,EAAAC,YAAA,KAAAkC,GAAA,QAAAjC,EAAAzB,UAAAC,OAAAyB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA5B,UAAA4B,GAuCT,OAvCSL,EAAAF,EAAAQ,KAAAC,MAAAT,EAAA,OAAAL,OAAAU,KACVK,MAAQ,CACJ4B,MAAO,CACHC,QAAS,CACL,CACIR,MAAO,IACPS,MAAO,KACPC,KAAM,OAEV,CACIV,MAAO,QACPS,MAAO,QACPC,KAAM,OAEV,CACIV,MAAO,cACPS,MAAO,cACPC,KAAM,OAEV,CACIV,MAAO,GACPS,MAAO,YACPC,KAAM,YAEV,CACIV,MAAO,GACPS,MAAO,OACPC,KAAM,YAEV,CACIV,MAAO,GACPS,MAAO,SACPC,KAAM,aAIdC,KAAM,GACN9B,WAAY,KAEnBV,EA+BA,OA/BAsB,YAAAa,EAAA,EAAAZ,IAAA,oBAAAP,MAGD,WAAqB,IAADyB,EAAA,KHmBf9F,EAAcc,KAAK,kBAAkBC,MAAK,SAAC0E,GAChD,OAAOA,EAAMxE,QGlBJF,MAAK,SAAA0E,GACFK,EAAKvD,MAAMwD,aAAaN,MAE3BhB,OAAM,SAAA/D,GACHoF,EAAK3B,SAAS,CAAEJ,WAAYrD,EAAMO,KAAKyD,aAG/CI,KAAKX,UAAS,SAAC6B,GAAE,MAAM,CACnBP,MAAKQ,wBAAA,GACED,EAAGP,OAAK,IACXI,KAAMC,EAAKvD,MAAM2D,uBAI5B,CAAAtB,IAAA,SAAAP,MAcD,WACI,OACI5B,IAAAC,cAACqC,IAAY,CAAClC,UAAU,mBAEfiC,KAAKjB,MAAMC,YAAerB,IAAAC,cAAA,QAAMG,UAAU,cAAa,gCAE5DJ,IAAAC,cAACC,IAAM,KACHF,IAAAC,cAACE,IAAM,KACHH,IAAAC,cAACyD,IAAY,CACTC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,KAAG,EACHtF,KAAM6D,KAAKjB,MAAM4B,cAMxC,EAAAb,IAAA,2BAAAP,MA/BD,SAAgC9B,EAAOsB,GACnC,IAAMgC,EAAOtD,EAAM2D,eAEnB,MAAO,CACHT,MAAKQ,wBAAA,GACEpC,EAAM4B,OAAK,IACdI,OACA9B,WAAY,UAGvByB,EAtES,CAASD,c,iBCDR,SAASiB,IACpB,OAAQ/D,IAAAC,cAAC+D,IAAM,CACXnB,KAAK,QACLoB,OAAQ,IACRC,MAAO,IACP9D,UAAU,oBAPlB+D,EAAQ,K,OCEO,SAASC,IACpB,OACIpE,IAAAC,cAACqC,IAAY,CAAClC,UAAU,oBAAmB,Y,6BCyIpCiE,G,OAzIJ,SAAA7D,GAAAC,YAAA4D,EAAA7D,GAAA,IAAAE,EAAAC,YAAA0D,GAAA,SAAAA,IAAA,IAAAzD,EAAAC,YAAA,KAAAwD,GAAA,QAAAvD,EAAAzB,UAAAC,OAAAyB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA5B,UAAA4B,GAwDR,OAxDQL,EAAAF,EAAAQ,KAAAC,MAAAT,EAAA,OAAAL,OAAAU,KACTK,MAAQ,CACN1C,MAAO,qBACPC,SAAU,UACV2F,cAAc,EACdC,eAAe,EACfC,aAAa,EACbC,OAAQ,IACT7D,EAED8D,iBAAmB,SAACjD,GAClBb,EAAKc,SAAS,CACZhD,MAAO+C,EAAEE,OAAOC,MAChB0C,cAAc,KAEjB1D,EACD+D,oBAAsB,SAAClD,GACrBb,EAAKc,SAAS,CACZ/C,SAAU8C,EAAEE,OAAOC,MACnB2C,eAAe,KAElB3D,EAEDgE,SAAW,WACT,IAAIC,GAAU,EAOd,OANKD,IAASE,QAAQlE,EAAKQ,MAAM1C,OAEE,KAAxBkC,EAAKQ,MAAMzC,WACpBkG,EAAU,iBAFVA,EAAU,eAKLA,GACRjE,EAEDmE,aAAe,WACb,IACIN,EADEO,EAAepE,EAAKgE,WAEtBI,EACFpE,EAAKc,SAAQuD,YAAC,GAAGD,GAAe,IAEhCvG,EAAMmC,EAAKQ,MAAM1C,MAAOkC,EAAKQ,MAAMzC,UAChCL,MAAK,SAACC,GACLqC,EAAKd,MAAMrB,MAAMF,MAElByD,OAAM,SAAC/D,GAEJwG,EADExG,GAASA,EAAMiH,QAA2B,MAAjBjH,EAAMiH,OACxB,iDAEA,gDAEXtE,EAAKc,SAAS,CACZ8C,aAAa,EACbC,eAIT7D,EA8EA,OA9EAsB,YAAAmC,EAAA,EAAAlC,IAAA,SAAAP,MAED,WAAU,IAADyB,EAAA,KACCoB,EAAWpC,KAAKjB,MAAhBqD,OACA7F,EAAWyD,KAAKvC,MAAhBlB,OACR,OACEoB,IAAAC,cAACqC,IAAY,CAAClC,UAAU,mBACtBJ,IAAAC,cAACC,IAAM,CAACE,UAAU,gBAChBJ,IAAAC,cAACE,IAAM,CAACgF,GAAG,KACTnF,IAAAC,cAAA,KAAGG,UAAU,gCAA+B,WAC5CJ,IAAAC,cAAA,OAAKG,UAAU,aACbJ,IAAAC,cAACsC,IAAQ,CACPE,MAAM,SACN2C,KAAK,WACLC,OAAK,EACLxC,KAAK,QACL+B,UAAQ,EACR3G,MAAM,QACNqH,QAAQ,QACR1D,MAAOS,KAAKjB,MAAM1C,MAClB8D,SAAUH,KAAKqC,iBACf/B,KAAMN,KAAKjB,MAAMkD,aAAe,mBAAqB,KACrDlE,UAAWiC,KAAKjB,MAAMkD,aAAe,aAAe,KAErDjC,KAAKjB,MAAMkD,cACVtE,IAAAC,cAAA,QAAMG,UAAU,qBACb,IAAI,oCAITJ,IAAAC,cAACsC,IAAQ,CACPE,MAAM,aACN2C,KAAK,OACLC,OAAK,EACLxC,KAAK,WACL+B,UAAQ,EACRhD,MAAOS,KAAKjB,MAAMzC,SAClB6D,SAAUH,KAAKsC,oBACfhC,KAAMN,KAAKjB,MAAMmD,cAAgB,mBAAqB,KACtDnE,UAAWiC,KAAKjB,MAAMmD,cAAgB,aAAe,KAEtDlC,KAAKjB,MAAMmD,eACVvE,IAAAC,cAAA,QAAMG,UAAU,qBAAoB,6BAIrCiC,KAAKjB,MAAMoD,aACVxE,IAAAC,cAAA,QAAMG,UAAU,yCACb,IACAqE,IAIPzE,IAAAC,cAAA,OAAKG,UAAU,eACbJ,IAAAC,cAAA,UACEK,QAAS,WACP+C,EAAK0B,gBAEPlC,KAAK,SACLzC,UAAU,8EACX,SAGDJ,IAAAC,cAAA,WACED,IAAAC,cAAA,UACEG,UAAU,SACVE,QAAS,WACP1B,MAEH,mBASdyF,EAtIQ,CAASvB,cCyJLyC,G,OA1JH,SAAA/E,GAAAC,YAAA8E,EAAA/E,GAAA,IAAAE,EAAAC,YAAA4E,GAAA,SAAAA,IAAA,IAAA3E,EAAAC,YAAA,KAAA0E,GAAA,QAAAzE,EAAAzB,UAAAC,OAAAyB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA5B,UAAA4B,GAyEP,OAzEOL,EAAAF,EAAAQ,KAAAC,MAAAT,EAAA,OAAAL,OAAAU,KACRK,MAAQ,CACJvC,KAAM,GACNH,MAAO,GACPC,SAAU,GACV6G,WAAW,EACXlB,cAAc,EACdC,eAAe,EACfkB,cAAc,EACdnE,WAAY,IACfV,EAED8E,gBAAkB,SAACjE,GACfb,EAAKc,SAAS,CACV7C,KAAM4C,EAAEE,OAAOC,MACf4D,WAAW,KAElB5E,EAED8D,iBAAmB,SAACjD,GAChBb,EAAKc,SAAS,CACVhD,MAAO+C,EAAEE,OAAOC,MAChB0C,cAAc,KAErB1D,EACD+D,oBAAsB,SAAClD,GACnBb,EAAKc,SAAS,CACV/C,SAAU8C,EAAEE,OAAOC,MACnB2C,eAAe,KAEtB3D,EACDgE,SAAW,WACP,IAAIC,GAAU,EAWd,MAV+B,KAA3BjE,EAAKQ,MAAMvC,KAAK8G,OAChBd,EAAU,YAEJD,IAASE,QAAQlE,EAAKQ,MAAM1C,OAGE,KAA/BkC,EAAKQ,MAAMzC,SAASgH,SACzBd,EAAU,iBAHVA,EAAU,eAMPA,GACVjE,EAEDmE,aAAe,WACX,IAAMC,EAAepE,EAAKgE,WACtBI,EACApE,EAAKc,SAAQuD,YAAC,GAAGD,GAAe,IAGhCpG,EAAOgC,EAAKQ,MAAMvC,KAAM+B,EAAKQ,MAAM1C,MAAOkC,EAAKQ,MAAMzC,UAChDL,MAAK,SAAAC,GACFqC,EAAKd,MAAM8F,gBAEd5D,OAAM,SAAA/D,GACH,IAAI4H,EAEAA,EADA5H,EAAMO,KAAKsH,OACL7H,EAAMO,KAAKsH,OAEZ7H,EAAMO,KAAKuH,OAAOpH,SACjB,+CAGAV,EAAMO,KAAKyD,QAErBrB,EAAKc,SAAS,CACV+D,cAAc,EACdnE,WAAYuE,QAI/BjF,EA4EA,OA5EAsB,YAAAqD,EAAA,EAAApD,IAAA,SAAAP,MAED,WAAU,IAADyB,EAAA,KACG2C,EAAgB3D,KAAKvC,MAArBkG,YACR,OACIhG,IAAAC,cAACqC,IAAY,CAAClC,UAAU,mBACpBJ,IAAAC,cAACC,IAAM,CAACE,UAAU,gBACdJ,IAAAC,cAACE,IAAM,CAACgF,GAAG,KACPnF,IAAAC,cAAA,KAAGG,UAAU,iCAAgC,WAC7CJ,IAAAC,cAAA,OAAKG,UAAU,aACXJ,IAAAC,cAACsC,IAAQ,CACLE,MAAM,YACN2C,KAAK,OACLC,OAAK,EACLxC,KAAK,OACL+B,UAAQ,EACR3G,MAAM,QACNqH,QAAQ,QACRW,WAAS,EACTrE,MAAOS,KAAKjB,MAAMvC,KAClB2D,SAAUH,KAAKqD,gBACf/C,KAAON,KAAKjB,MAAMoE,UAAa,mBAAqB,KACpDpF,UAAYiC,KAAKjB,MAAMoE,UAAa,aAAe,KAGlDnD,KAAKjB,MAAMoE,WAAcxF,IAAAC,cAAA,QAAMG,UAAU,qBAAoB,gCAElEJ,IAAAC,cAACsC,IAAQ,CACLE,MAAM,aACN2C,KAAK,WACLC,OAAK,EACLxC,KAAK,QACL+B,UAAQ,EACR3G,MAAM,QACNqH,QAAQ,QACR1D,MAAOS,KAAKjB,MAAM1C,MAClB8D,SAAUH,KAAKqC,iBACf/B,KAAON,KAAKjB,MAAMkD,aAAgB,mBAAqB,KACvDlE,UAAYiC,KAAKjB,MAAMkD,aAAgB,aAAe,KAGrDjC,KAAKjB,MAAMkD,cAAiBtE,IAAAC,cAAA,QAAMG,UAAU,qBAAoB,qCAErEJ,IAAAC,cAACsC,IAAQ,CACLE,MAAM,gBACN2C,KAAK,OACLC,OAAK,EACLxC,KAAK,WACL+B,UAAQ,EACRhD,MAAOS,KAAKjB,MAAMzC,SAClB6D,SAAUH,KAAKsC,oBACfhC,KAAON,KAAKjB,MAAMmD,cAAiB,mBAAqB,KACxDnE,UAAYiC,KAAKjB,MAAMmD,cAAiB,aAAe,KAGtDlC,KAAKjB,MAAMmD,eAAkBvE,IAAAC,cAAA,QAAMG,UAAU,qBAAoB,6BAGjEiC,KAAKjB,MAAMqE,cAAiBzF,IAAAC,cAAA,QAAMG,UAAU,yCAAwC,WAASiC,KAAKjB,MAAME,WAAW,wBAG5HtB,IAAAC,cAAA,OAAKG,UAAU,eACXJ,IAAAC,cAAA,UACI4C,KAAK,SACLvC,QAAS,WAAQ+C,EAAK0B,gBACtB3E,UAAU,8EAA6E,eAG3FJ,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAQG,UAAU,aAAaE,QAAS,WAAQ0F,MAAiB,oBAO5FT,EArJO,CAASzC,cCDRW,G,OAAe,SAACyC,EAAaC,EAAiBC,EAAYzG,GAuCnE,OAtCcuG,EAAYG,KAAI,SAACC,EAAKC,GAChC,MAAO,CACHC,GAAID,EAAQ,EACZxH,MAAOuH,EAAIvH,MACXC,YAAasH,EAAItH,YACjBI,UAAWY,IAAAC,cAAA,OAAKG,UAAU,WACtBJ,IAAAC,cAACwG,IAAU,CACPC,UAAU,OAEV1G,IAAAC,cAAC0G,IAAM,CAACC,IAAI,IAAIC,UAAQ,EAACzG,UAAU,YAAYE,QAAS,kBAAM6F,EAAgBI,EAAOD,EAAInH,OACrFa,IAAAC,cAAC6G,IAAO,CAAC1B,KAAK,OAAOhF,UAAYkG,EAAIlH,UAAa,gBAAkB,MAExEY,IAAAC,cAAA,WAAK,oBAGbT,KAAMQ,IAAAC,cAAA,OAAKG,UAAU,WACjBJ,IAAAC,cAACwG,IAAU,CACPC,UAAU,OAEV1G,IAAAC,cAAC0G,IAAM,CAACC,IAAI,IAAIC,UAAQ,EAACzG,UAAU,YAAYE,QAAS,kBAAM8F,EAAWG,EAAOD,EAAInH,OAChFa,IAAAC,cAAC6G,IAAO,CAAC1B,KAAK,QAAQhF,UAAYkG,EAAI9G,KAAQ,gBAAkB,MAEpEQ,IAAAC,cAAA,WAAK,UAIbL,OAAQI,IAAAC,cAAA,OAAKG,UAAU,WACnBJ,IAAAC,cAACwG,IAAU,CACPC,UAAU,OAEV1G,IAAAC,cAAC0G,IAAM,CAACC,IAAI,IAAIC,UAAQ,EAACzG,UAAU,YAAYE,QAAS,kBAAMX,EAAW4G,EAAOD,EAAInH,OAChFa,IAAAC,cAAC6G,IAAO,CAAC1B,KAAK,eAElBpF,IAAAC,cAAA,WAAK,kBCgIV8G,EA1JN,SAAAvG,GAAAC,YAAAsG,EAAAvG,GAAA,IAAAE,EAAAC,YAAAoG,GAAA,SAAAA,IAAA,IAAAnG,EAAAC,YAAA,KAAAkG,GAAA,QAAAjG,EAAAzB,UAAAC,OAAAyB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA5B,UAAA4B,GAmHN,OAnHML,EAAAF,EAAAQ,KAAAC,MAAAT,EAAA,OAAAL,OAAAU,KACPK,MAAQ,CACN4F,MAAM,EACNC,aAAc,GACdC,MAAO,GACPlE,MAAO,GACPpE,QAAQ,GACTgC,EAeD9B,QAAU,SAACqI,GACTvG,EAAKc,UAAS,SAAC6B,GAAE,MAAM,CACrBP,MAAM,GAAD3C,OAAA+G,YAAM7D,EAAGP,OAAK,CAAEmE,SAExBvG,EAED0C,aAAe,SAACN,GACdpC,EAAKc,SAAS,CAAEsB,WACjBpC,EAED6C,aAAe,kBAAMA,EAAa7C,EAAKQ,MAAM4B,MAAOpC,EAAKuF,gBAAiBvF,EAAKwF,WAAYxF,EAAKyG,eAAazG,EAE7G0G,aAAe,WACb1G,EAAKc,UAAS,SAAC6B,GAAE,MACf,CAAE3E,QAAS2E,EAAG3E,YAEjBgC,EAGDuF,gBAAkB,SAACI,EAAOC,GACxBtH,EAAWsH,GAAK5F,EAAKQ,MAAM4B,MAAMuD,GAAOnH,WACrCd,MAAK,SAAAW,GACJ2B,EAAKc,UAAS,SAAC6B,GACb,IAAMgE,EAAWhE,EAEjB,OADAgE,EAASvE,MAAMuD,GAAOnH,WAAamI,EAASvE,MAAMuD,GAAOnH,UAClDmI,QAGVvF,OAAM,SAAA/D,GACL2C,EAAKc,SAAS,CAAEJ,WAAYrD,QAEjC2C,EAEDwF,WAAa,SAACG,EAAOC,GACnBtH,EAAWsH,EAAI,MAAO5F,EAAKQ,MAAM4B,MAAMuD,GAAO/G,MAC3ClB,MAAK,SAAAW,GACJ2B,EAAKc,UAAS,SAAC6B,GACb,IAAMgE,EAAWhE,EAEjB,OADAgE,EAASvE,MAAMuD,GAAO/G,MAAQ+H,EAASvE,MAAMuD,GAAO/G,KAC7C+H,QAGVvF,OAAM,SAAA/D,GACL2C,EAAKc,SAAS,CAAEJ,WAAYrD,QAEjC2C,EAED4G,OAAS,WACP5G,EAAKc,SAAS,CACZuF,aAAc,GACdC,MAAO,MAEVtG,EAED6G,YAAc,SAAClJ,GACbqC,EAAKc,SAAS,CACZuF,aAAc1I,EACdK,QAAQ,EACRoI,MAAM,KAETpG,EAEDoF,YAAc,WACZpF,EAAKc,SAAS,CACZ9C,QAAQ,KAEXgC,EAEDyG,aAAe,SAACd,EAAOC,GACrB7G,EAAW6G,GACRlI,MAAK,SAAAW,GACJ2B,EAAKc,UAAS,SAAC6B,GAAE,MAAM,CACrBP,MAAM,GAAD3C,OAAA+G,YAAM7D,EAAGP,MAAM0E,OAAO,EAAGnB,IAAMa,YAAK7D,EAAGP,MAAM0E,OAAO,EAAGnE,EAAGP,MAAM1D,iBAGxE0C,OAAM,SAAA/D,GACL2C,EAAKc,SAAS,CAAEJ,WAAYrD,QAEjC2C,EAED+G,cAAgB,WACdvJ,IACGE,MAAK,SAAAC,GACJqC,EAAKc,SAAS,CACZuF,aAAc,GACdC,MAAO,GACPlE,MAAO,GACPpE,QAAQ,OAGXoD,OAAM,SAAA/D,GACL2C,EAAKc,SAAS,CAAEJ,WAAYrD,QAEjC2C,EAmCA,OAnCAsB,YAAA6E,EAAA,EAAA5E,IAAA,oBAAAP,MAzGD,WAAqB,IAADyB,EAAA,KTEb9F,EAAcc,KAAK,aAAaC,MAAK,SAACC,GAC3C,OAAOA,EAAKC,QSDTF,MAAK,SAAAC,GACJ8E,EAAKoE,YAAYlJ,MAElByD,OAAM,SAAA/D,GACLoF,EAAK3B,SAAS,CACZsF,MAAM,SAGb,CAAA7E,IAAA,SAAAP,MAiGD,WACE,IAAM7B,EAAYsC,KAAKjB,MAAM6F,aAAgB5E,KAAKjB,MAAM6F,aAAa1I,KAAKM,KAAO,GACjF,OAAOmB,IAAAC,cAAA,OAAKG,UAAU,YACpBJ,IAAAC,cAACmE,EAAM,MACL/B,KAAKjB,MAAM4F,KACXhH,IAAAC,cAAC8D,EAAU,MACR1B,KAAKjB,MAAMxC,OACVoB,IAAAC,cAACsF,EAAM,CAACS,YAAa3D,KAAK2D,YAAaJ,WAAYvD,KAAKiF,eACtDjF,KAAKjB,MAAM6F,aAGXjH,IAAAC,cAAC2H,WAAQ,KAEP5H,IAAAC,cAACM,EAAO,CACNR,SAAUA,EACVjB,QAASuD,KAAKvD,QACdV,QAASiE,KAAKsF,gBAGhB3H,IAAAC,cAAC8C,EAAQ,CACPO,aAAcjB,KAAKiB,aACnBN,MAAOX,KAAKjB,MAAM4B,MAClBS,aAAcpB,KAAKoB,aACnB0C,gBAAiB9D,KAAK8D,gBACtBC,WAAY/D,KAAK+D,WACjBzG,WAAY0C,KAAKgF,gBAhBrBrH,IAAAC,cAACoE,EAAK,CAAC5F,MAAO4D,KAAKoF,YAAa7I,OAAQyD,KAAKiF,oBAwBxDP,EAtJM,CAASjE,aCAE+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCRNC,IAASC,OAAOnI,IAAAC,cAAC8G,EAAG,MAAKqB,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlK,MAAK,SAAAmK,GACjCA,EAAaC,iB","file":"static/js/main.70ac24b4.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_baseAPIURL,\n  withCredentials: true,\n})\n\naxiosInstance.interceptors.response.use(\n  (res) => {\n    return res\n  },\n  (error) => {\n    return Promise.reject(error.response)\n  }\n)\n\nexport const signout = () => {\n  return axiosInstance.post('/api/logout').then((user) => {\n    // delete axiosInstance.defaults.headers.common[\"Authorization\"];\n    return user.data\n  })\n}\n\nexport const init = () => {\n  return axiosInstance.post('/api/init').then((user) => {\n    return user.data\n  })\n}\n\nexport const login = (email, password) => {\n  return axiosInstance\n    .post('/api/login', {\n      email,\n      password,\n    })\n    .then((user) => {\n      // axiosInstance.defaults.headers.common[\"Authorization\"] = `Bearer ${user.data.token}`;\n      return user.data\n    })\n}\n\nexport const signup = (name, email, password) => {\n  return axiosInstance\n    .post('/api/signup', {\n      name,\n      email,\n      password,\n    })\n    .then((user) => {\n      return user.data\n    })\n}\n\nexport const addTodo = (title, description) => {\n  return axiosInstance\n    .post('/api/todo/add', {\n      title,\n      description,\n    })\n    .then((todo) => {\n      return todo.data\n    })\n}\n\nexport const listTodo = () => {\n  //I have used post instead of get, read https://blog.teamtreehouse.com/the-definitive-guide-to-get-vs-post\n  return axiosInstance.post('/api/todo/list').then((todos) => {\n    return todos.data\n  })\n}\n\nexport const updateTodo = (_id, important = null, done = null) => {\n  //I have used post instead of get, read https://blog.teamtreehouse.com/the-definitive-guide-to-get-vs-post\n  const fieldsToUpdate = {\n    _id,\n  }\n\n  if (important !== null) {\n    fieldsToUpdate.important = important\n  }\n  if (done !== null) {\n    fieldsToUpdate.done = done\n  }\n  return axiosInstance\n    .patch('/api/todo/update', fieldsToUpdate)\n    .then((todo) => {\n      return todo.data\n    })\n}\n\nexport const deleteTodo = (_id) => {\n  //I have used post instead of get, read https://blog.teamtreehouse.com/the-definitive-guide-to-get-vs-post\n  return axiosInstance\n    .delete('/api/todo/delete', {\n      data: {\n        _id,\n      },\n    })\n    .then((todo) => {\n      return todo\n    })\n}\n","import React from 'react';\nimport { MDBRow, MDBCol } from \"mdbreact\";\n\nimport './WelcomeHeader.css'\n\nexport default function WelcomeHeader(props) {\n    const { userName, signout } = props\n    return (\n        <MDBRow>\n            <MDBCol>\n                <span className=\"todo-welcome\" >{`Welcome ${userName}`}</span>\n            </MDBCol>\n            <MDBCol>\n                <div className=\"todo-logout\">\n                    <button className=\"signup\" onClick={() => { signout() }}>Sign-out</button>\n                </div>\n\n            </MDBCol>\n        </MDBRow>\n    );\n}\n\n","import React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput } from \"mdbreact\";\nimport { addTodo } from '../../utils/APICalls'\nimport WelcomeHeader from '../WelcomeHeader/WelcomeHeader'\nimport './AddTodo.css'\n\nclass AddTodo extends Component {\n    state = {\n        title: '',\n        description: '',\n        done: false,\n        important: false,\n        titleError: false,\n        errMessage: ''\n    }\n\n    validateInput = () => {\n        return (!this.state.title) ? false : true\n    }\n    handleTitleChange = (e) => {\n        this.setState({\n            title: e.target.value,\n            titleError: false\n        })\n    }\n\n    handleDescriptionChange = (e) => {\n        this.setState({ description: e.target.value })\n    }\n\n    resetInput = () => {\n        this.setState({\n            title: '',\n            description: '',\n        })\n    }\n\n    handleAddTodo = () => {\n        this.setState({ errMessage: '' })\n\n        if (this.validateInput()) {\n            addTodo(this.state.title, this.state.description)\n                .then(todo => {\n                    this.props.addTodo({\n                        title: this.state.title,\n                        description: this.state.description,\n                        important: false,\n                        done: false,\n                        _id: todo.todo._id\n                    })\n                    this.resetInput()\n                })\n                .catch(error => {\n                    this.setState({ errMessage: error.data.message })\n                })\n        }\n        else {\n            this.setState({\n                titleError: true\n            })\n        }\n    }\n\n    render() {\n        const { userName, signout } = this.props\n        return (\n            <MDBContainer className=\"add-todo-main\">\n                <WelcomeHeader userName={userName} signout={signout} />\n                <MDBRow>\n                    <MDBCol>\n                        <MDBInput\n                            value={this.state.title}\n                            onChange={this.handleTitleChange}\n                            label=\"ToDo Title\"\n                            background\n                            size={(this.state.titleError) ? \"lg inputErrorDiv\" : \"lg\"}\n                            className={(this.state.titleError) ? \"inputError\" : \"\"}\n                            maxLength={100}\n                        />\n                        {\n                            (this.state.titleError) && <span className=\"error-text\"> ToDo Title cannot be blank.</span>\n                        }\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol>\n                        <MDBInput\n                            value={this.state.description}\n                            onChange={this.handleDescriptionChange}\n                            type=\"textarea\"\n                            label=\"ToDo Description\"\n                            background\n                            maxLength={250}\n                        />\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol className=\"align-right\">\n                        <button type=\"button\" onClick={this.resetInput} className=\"btn btn-outline-info-modified waves-effect\">Reset</button>\n                        <button type=\"button\" onClick={this.handleAddTodo} className=\"btn btn-outline-info-modified waves-effect\">Add</button>\n\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBDataTable } from 'mdbreact';\nimport { listTodo } from '../../utils/APICalls'\nimport './ListTodo.css'\n\nclass ListTodo extends Component {\n    state = {\n        todos: {\n            columns: [\n                {\n                    label: '#',\n                    field: 'id',\n                    sort: 'asc',\n                },\n                {\n                    label: 'Title',\n                    field: 'title',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Description',\n                    field: 'description',\n                    sort: 'asc'\n                },\n                {\n                    label: '',\n                    field: 'important',\n                    sort: 'disabled'\n                },\n                {\n                    label: '',\n                    field: 'done',\n                    sort: 'disabled'\n                },\n                {\n                    label: '',\n                    field: 'delete',\n                    sort: 'disabled'\n                }\n\n            ],\n            rows: [],\n            errMessage: ''\n        }\n    }\n\n\n    componentDidMount() {\n        listTodo()\n            .then(todos => {\n                this.props.initiateTodo(todos)\n            })\n            .catch(error => {\n                this.setState({ errMessage: error.data.message })\n            })\n\n        this.setState((ps) => ({\n            todos: {\n                ...ps.todos,\n                rows: this.props.fillTodoRows()\n            }\n        })\n        )\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const rows = props.fillTodoRows()\n\n        return {\n            todos: {\n                ...state.todos,\n                rows,\n                errMessage: ''\n            }\n        }\n    }\n\n    render() {\n        return (\n            <MDBContainer className=\"todo-table-main\" >\n                {\n                    (this.state.titleError) && <span className=\"error-text\"> ToDo Title cannot be blank.</span>\n                }\n                <MDBRow>\n                    <MDBCol>\n                        <MDBDataTable\n                            striped\n                            bordered\n                            small\n                            btn\n                            data={this.state.todos}\n                        />\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n};\n\nexport default ListTodo;","import React from 'react';\nimport Loader from 'react-loader-spinner';\nrequire('./PageLoader.css')\n\nexport default function PageLoader() {\n    return (<Loader\n        type=\"Watch\"\n        height={100}\n        width={100}\n        className=\"pageLoader-main\"\n    />)\n}\n\n","import React from 'react';\nimport { MDBContainer } from \"mdbreact\";\nimport './Header.css'\n\nexport default function Header() {\n    return (\n        <MDBContainer className=\"header-main glow\">\n            ToDo App\n        </MDBContainer>\n    )\n}","import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBInput } from 'mdbreact'\nimport validate from 'validator'\nimport './Login.css'\nimport { login } from '../../utils/APICalls'\n\nclass Login extends Component {\n  state = {\n    email: 'tester@example.com',\n    password: 'testing',\n    invalidEmail: false,\n    emptyPassword: false,\n    loginFailed: false,\n    errMsg: '',\n  }\n\n  handleEmailInput = (e) => {\n    this.setState({\n      email: e.target.value,\n      invalidEmail: false,\n    })\n  }\n  handlePasswordInput = (e) => {\n    this.setState({\n      password: e.target.value,\n      emptyPassword: false,\n    })\n  }\n\n  validate = () => {\n    let invalid = false\n    if (!validate.isEmail(this.state.email)) {\n      invalid = 'invalidEmail'\n    } else if (this.state.password === '') {\n      invalid = 'emptyPassword'\n    }\n\n    return invalid\n  }\n\n  handleSubmit = () => {\n    const invalidField = this.validate()\n    let errMsg\n    if (invalidField) {\n      this.setState({ [invalidField]: true })\n    } else {\n      login(this.state.email, this.state.password)\n        .then((user) => {\n          this.props.login(user)\n        })\n        .catch((error) => {\n          if (error && error.status && error.status === 400) {\n            errMsg = 'Incorrect username/password, please try again.'\n          } else {\n            errMsg = 'Something went wrong, please try again later.'\n          }\n          this.setState({\n            loginFailed: true,\n            errMsg,\n          })\n        })\n    }\n  }\n\n  render() {\n    const { errMsg } = this.state\n    const { signup } = this.props\n    return (\n      <MDBContainer className='login-todo-main'>\n        <MDBRow className='align-center'>\n          <MDBCol md='6'>\n            <p className='h5 text-center login-heading'>Sign in</p>\n            <div className='grey-text'>\n              <MDBInput\n                label='Email:'\n                icon='envelope'\n                group\n                type='email'\n                validate\n                error='wrong'\n                success='right'\n                value={this.state.email}\n                onChange={this.handleEmailInput}\n                size={this.state.invalidEmail ? 'lg inputErrorDiv' : 'lg'}\n                className={this.state.invalidEmail ? 'inputError' : ''}\n              />\n              {this.state.invalidEmail && (\n                <span className='signup-error-text'>\n                  {' '}\n                  Please type valid email address.\n                </span>\n              )}\n              <MDBInput\n                label='Password: '\n                icon='lock'\n                group\n                type='password'\n                validate\n                value={this.state.password}\n                onChange={this.handlePasswordInput}\n                size={this.state.emptyPassword ? 'lg inputErrorDiv' : 'lg'}\n                className={this.state.emptyPassword ? 'inputError' : ''}\n              />\n              {this.state.emptyPassword && (\n                <span className='signup-error-text'>\n                  Password cannot be blank.\n                </span>\n              )}\n              {this.state.loginFailed && (\n                <span className='signup-error-text signin-bad-response'>\n                  {' '}\n                  {errMsg}\n                </span>\n              )}\n            </div>\n            <div className='text-center'>\n              <button\n                onClick={() => {\n                  this.handleSubmit()\n                }}\n                type='button'\n                className='btn Ripple-parent btn btn-outline-info-modified Ripple-parent waves-effect'\n              >\n                Login\n              </button>\n              <div>\n                <button\n                  className='signup'\n                  onClick={() => {\n                    signup()\n                  }}\n                >\n                  Signup\n                </button>\n              </div>\n            </div>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    )\n  }\n}\n\nexport default Login\n","import React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput } from 'mdbreact';\nimport validate from 'validator'\nimport { signup } from '../../utils/APICalls'\nimport './Signup.css'\nclass Signup extends Component {\n    state = {\n        name: '',\n        email: '',\n        password: '',\n        emptyName: false,\n        invalidEmail: false,\n        emptyPassword: false,\n        signupFailed: false,\n        errMessage: ''\n    }\n\n    handleNameInput = (e) => {\n        this.setState({\n            name: e.target.value,\n            emptyName: false\n        })\n    }\n\n    handleEmailInput = (e) => {\n        this.setState({\n            email: e.target.value,\n            invalidEmail: false\n        })\n    }\n    handlePasswordInput = (e) => {\n        this.setState({\n            password: e.target.value,\n            emptyPassword: false\n        })\n    }\n    validate = () => {\n        let invalid = false\n        if (this.state.name.trim() === '') {\n            invalid = \"emptyName\"\n        }\n        else if (!validate.isEmail(this.state.email)) {\n            invalid = \"invalidEmail\"\n        }\n        else if (this.state.password.trim() === \"\") {\n            invalid = \"emptyPassword\"\n        }\n\n        return invalid\n    }\n\n    handleSubmit = () => {\n        const invalidField = this.validate()\n        if (invalidField) {\n            this.setState({ [invalidField]: true })\n        }\n        else {\n            signup(this.state.name, this.state.email, this.state.password)\n                .then(user => {\n                    this.props.signupDone()\n                })\n                .catch(error => {\n                    let err\n                    if (error.data.errmsg) {\n                        err = error.data.errmsg\n                    }\n                    else if (error.data.errors.password) {\n                        err = \"Invalid Password, must be atleast 7 letters.\"\n                    }\n                    else {\n                        err = error.data.message\n                    }\n                    this.setState({\n                        signupFailed: true,\n                        errMessage: err\n                    })\n                })\n        }\n    }\n\n    render() {\n        const { backToLogin } = this.props\n        return (\n            <MDBContainer className=\"login-todo-main\">\n                <MDBRow className=\"align-center\">\n                    <MDBCol md=\"6\">\n                        <p className=\"h5 text-center signup-heading\">Sign up</p>\n                        <div className=\"grey-text\">\n                            <MDBInput\n                                label=\"Your name\"\n                                icon=\"user\"\n                                group\n                                type=\"text\"\n                                validate\n                                error=\"wrong\"\n                                success=\"right\"\n                                autoFocus\n                                value={this.state.name}\n                                onChange={this.handleNameInput}\n                                size={(this.state.emptyName) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.emptyName) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.emptyName) && <span className=\"signup-error-text\"> Name field cannot be blank.</span>\n                            }\n                            <MDBInput\n                                label=\"Your email\"\n                                icon=\"envelope\"\n                                group\n                                type=\"email\"\n                                validate\n                                error=\"wrong\"\n                                success=\"right\"\n                                value={this.state.email}\n                                onChange={this.handleEmailInput}\n                                size={(this.state.invalidEmail) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.invalidEmail) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.invalidEmail) && <span className=\"signup-error-text\"> Please type valid email address.</span>\n                            }\n                            <MDBInput\n                                label=\"Your password\"\n                                icon=\"lock\"\n                                group\n                                type=\"password\"\n                                validate\n                                value={this.state.password}\n                                onChange={this.handlePasswordInput}\n                                size={(this.state.emptyPassword) ? \"lg inputErrorDiv\" : \"lg\"}\n                                className={(this.state.emptyPassword) ? \"inputError\" : \"\"}\n                            />\n                            {\n                                (this.state.emptyPassword) && <span className=\"signup-error-text\">Password cannot be blank.</span>\n                            }\n                            {\n                                (this.state.signupFailed) && <span className=\"signup-error-text signin-bad-response\"> Error: {this.state.errMessage}, please try again.</span>\n                            }\n                        </div>\n                        <div className=\"text-center\">\n                            <button\n                                type=\"button\"\n                                onClick={() => { this.handleSubmit() }}\n                                className=\"btn Ripple-parent btn btn-outline-info-modified Ripple-parent waves-effect\">\n                                Create User\n                            </button>\n                            <div>\n                                <button className=\"login-link\" onClick={() => { backToLogin() }}>Sign-in</button>\n                            </div>\n                        </div>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n};\n\n\n\nexport default Signup","import React from 'react';\nimport { MDBBtn, MDBIcon, MDBTooltip } from 'mdbreact';\n\n\nexport const fillTodoRows = (todoRecords, handleImportant, handleDone, deleteTodo) => {\n    const todos = todoRecords.map((rec, index) => {\n        return {\n            id: index + 1,\n            title: rec.title,\n            description: rec.description,\n            important: <div className=\"todoRow\">\n                <MDBTooltip\n                    placement=\"top\"\n                >\n                    <MDBBtn tag=\"a\" floating className=\"round-btn\" onClick={() => handleImportant(index, rec._id)} >\n                        <MDBIcon icon=\"star\" className={(rec.important) ? \"filled-yellow\" : \"\"} />\n                    </MDBBtn>\n                    <div>Mark Important</div>\n                </MDBTooltip>\n            </div>,\n            done: <div className=\"todoRow\">\n                <MDBTooltip\n                    placement=\"top\"\n                >\n                    <MDBBtn tag=\"a\" floating className=\"round-btn\" onClick={() => handleDone(index, rec._id)} >\n                        <MDBIcon icon=\"check\" className={(rec.done) ? \"filled-yellow\" : \"\"} />\n                    </MDBBtn>\n                    <div>Done</div>\n                </MDBTooltip>\n            </div>\n            ,\n            delete: <div className=\"todoRow\">\n                <MDBTooltip\n                    placement=\"top\"\n                >\n                    <MDBBtn tag=\"a\" floating className=\"round-btn\" onClick={() => deleteTodo(index, rec._id)} >\n                        <MDBIcon icon=\"trash-alt\" />\n                    </MDBBtn>\n                    <div>Remove</div>\n                </MDBTooltip>\n            </div>\n        }\n    })\n    return todos\n}","import React, { Component, Fragment } from 'react';\nimport AddTodo from './AddTodo/AddTodo'\nimport ListTodo from './ListTodo/ListTodo'\nimport PageLoader from './PageLoader/PageLoader'\nimport Header from './Header/Header'\nimport Login from './Login/Login'\nimport { init } from '../utils/APICalls'\nimport Signup from './Signup/Signup'\nimport './App.css'\nimport { updateTodo, deleteTodo, signout } from '../utils/APICalls'\nimport { fillTodoRows } from '../utils/Helper'\n\nclass App extends Component {\n  state = {\n    init: true,\n    loggedInUser: '',\n    token: '',\n    todos: [],\n    signup: false\n  }\n\n\n  componentDidMount() {\n    init()\n      .then(user => {\n        this.handleLogin(user)\n      })\n      .catch(error => {\n        this.setState({\n          init: false\n        })\n      })\n  }\n\n  addTodo = (newTodo) => {\n    this.setState((ps) => ({\n      todos: [...ps.todos, newTodo]\n    }))\n  }\n\n  initiateTodo = (todos) => {\n    this.setState({ todos })\n  }\n\n  fillTodoRows = () => fillTodoRows(this.state.todos, this.handleImportant, this.handleDone, this.handleDelete)\n\n  toggleSignup = () => {\n    this.setState((ps) => (\n      { signup: !ps.signup }\n    ))\n  }\n\n\n  handleImportant = (index, id) => {\n    updateTodo(id, !this.state.todos[index].important)\n      .then(todo => {\n        this.setState((ps) => {\n          const newState = ps\n          newState.todos[index].important = !newState.todos[index].important\n          return newState\n        })\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  handleDone = (index, id) => {\n    updateTodo(id, null, !this.state.todos[index].done)\n      .then(todo => {\n        this.setState((ps) => {\n          const newState = ps\n          newState.todos[index].done = !newState.todos[index].done\n          return newState\n        })\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  logout = () => {\n    this.setState({\n      loggedInUser: \"\",\n      token: \"\"\n    })\n  }\n\n  handleLogin = (user) => {\n    this.setState({\n      loggedInUser: user,\n      signup: false,\n      init: false\n    })\n  }\n\n  backToLogin = () => {\n    this.setState({\n      signup: false\n    })\n  }\n\n  handleDelete = (index, id) => {\n    deleteTodo(id)\n      .then(todo => {\n        this.setState((ps) => ({\n          todos: [...ps.todos.splice(0, index), ...ps.todos.splice(1, ps.todos.length)]\n        }))\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  handleSignout = () => {\n    signout()\n      .then(user => {\n        this.setState({\n          loggedInUser: '',\n          token: '',\n          todos: [],\n          signup: false\n        })\n      })\n      .catch(error => {\n        this.setState({ errMessage: error })\n      })\n  }\n\n  render() {\n    const userName = (this.state.loggedInUser) ? this.state.loggedInUser.user.name : \"\"\n    return <div className=\"app-main\">\n      <Header />\n      {(this.state.init) ?\n        <PageLoader />\n        : (this.state.signup)\n          ? <Signup backToLogin={this.backToLogin} signupDone={this.toggleSignup} />\n          : (!this.state.loggedInUser)\n            ? <Login login={this.handleLogin} signup={this.toggleSignup} />\n            : (\n              <Fragment>\n\n                <AddTodo\n                  userName={userName}\n                  addTodo={this.addTodo}\n                  signout={this.handleSignout}\n                />\n\n                <ListTodo\n                  initiateTodo={this.initiateTodo}\n                  todos={this.state.todos}\n                  fillTodoRows={this.fillTodoRows}\n                  handleImportant={this.handleImportant}\n                  handleDone={this.handleDone}\n                  deleteTodo={this.handleDelete}\n                />\n\n              </Fragment>\n            )\n      }\n    </div>\n\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}